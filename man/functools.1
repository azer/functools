.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "FUNCTOOLS" "1" "May 2011" "" ""
.
.SH "NAME"
\fBfunctools\fR \- a minimal javascript library for functional programming
.
.SH "SYNOPSIS"
A typical usage:
.
.IP "" 4
.
.nf

var map = require("functools")\.map;

var seq = [3,1,4,1,5,9];

functools\.map(function(el,ind,seq){
  return el+ind;
},seq);
.
.fi
.
.IP "" 0
.
.P
Function Composition:
.
.IP "" 4
.
.nf

var compose = require("functools")\.compose;

compose(select, update, prettify, display)("body \.messages");
.
.fi
.
.IP "" 0
.
.P
Currying:
.
.IP "" 4
.
.nf

var fn = require("functools");

var pickEvens = fn\.curry(fn\.filter)(function(num){ return num%2==0 });

pickEvens([3,1,4]) // returns [4]
pickEvens([1,5,9,2,6,5]) // returns [2,6]
.
.fi
.
.IP "" 0
.
.P
Partial Function Application:
.
.IP "" 4
.
.nf

Foobar\.prototype\.doSomething = function(msg){
  puts(msg);
  this\.corge();
}

server\.on("connection", functools\.partial(foobar\.doSomething, ["Hello World"], foobar));
.
.fi
.
.IP "" 0
.
.SH "DESCRIPTION"
functools is a library for functional programming written in JavaScript\. It\'s based on a CommonJS module consists of several function manipulation and list iteration tools\.
.
.SH "API"
.
.SS "compose(<em>functions \.\.\.</em>)"
Combine \fIfunctions\fR in a new one, passing the result of each function to next one, from left to right\.
.
.IP "" 4
.
.nf

function cube(x){ return x*x*x };

compose(Math\.sqrt,cube)(4); // returns 8
.
.fi
.
.IP "" 0
.
.SS "curry(<em>function</em>, <em>args \.\.\.</em>)"
Transform multiple\-argument \fIfunction\fR into a chain of functions that return each other until all arguments are gathered\.
.
.IP "" 4
.
.nf

function sum(x,y){ return x+y; }

var add3 = curry(sum, 3);

add3(14); // returns 17
add3(20); // returns 23
.
.fi
.
.IP "" 0
.
.SS "partial(<em>function</em>,<em>initial arguments</em>,<em>context</em>)"
Return a new function which will call \fIfunction\fR with the gathered arguments\.
.
.IP "" 4
.
.nf

function testPartial(){
  var args = reduce(function(x,y){ x+", "+y },arguments);

  console\.log("this:",this);
  console\.log("args:",args);
}

partial(testPartial, [3,14], 3\.14159)(1,5,9);
.
.fi
.
.IP "" 0
.
.P
The example code above will output:
.
.IP "" 4
.
.nf

this: 3\.14159
args: 3,14,1,5,9
.
.fi
.
.IP "" 0
.
.SS "each(<em>function</em>,<em>iterable</em>)"
Call \fIfunction\fR once for element in \fIiterable\fR\.
.
.IP "" 4
.
.nf

each(function(el,ind,list){ console\.assert( el == list[ind] ); }, [3,1,4]);
.
.fi
.
.IP "" 0
.
.SS "map(<em>function</em>,<em>iterable</em>)"
Invoke \fIfunction\fR once for each element of \fIiterable\fR\. Creates a new array containing the values returned by the function\.
.
.IP "" 4
.
.nf

map(function(el,ind,list){ return el*el },[3,1,4,1,5,9]); // returns [9,1,16,1,25,81]
.
.fi
.
.IP "" 0
.
.SS "filter(<em>function</em>,<em>iterable</em>)"
Construct a new list from those elements of \fIiterable\fR for which \fIfunction\fR returns true\.
.
.IP "" 4
.
.nf

filter(function(el,ind,list){ return el%2==0 },[3,1,4]); // returns [4]
.
.fi
.
.IP "" 0
.
.SS "reduce(<em>function</em>,<em>iterable</em>)"
Apply \fIfunction\fR cumulatively to the items of \fIiterable\fR, as to reduce the \fIiterable\fR to a single value
.
.IP "" 4
.
.nf

reduce(function(x,y){ return x*y }, [3,1,4]); // returns 12
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
.
.IP "\(bu" 4
Roka Lisp \fIhttp://github\.com/azer/rokalisp\fR
.
.IP "\(bu" 4
JSBuild \fIhttp://github\.com/azer/jsbuild\fR
.
.IP "" 0

